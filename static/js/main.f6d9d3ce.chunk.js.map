{"version":3,"sources":["Button.module.css","ComponentInstaller.jsx","Display.jsx","Button.jsx","ControlPanel.jsx","ComponentBox.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ComponentInstaller","render","className","props","nameInstaller","type","value","onChange","onChangeFunc","classRed","React","Component","Display","onChangeValueMax","e","parseInt","currentTarget","adjustValueMax","onChangeValueMin","adjustValueMin","state","maxV","maxValue","minV","minValue","memo","memoryValue","settingMode","classRedForDisplay","classRedForMaxValue","classRedForMinValue","Button","onClick","onClickFunc","disabled","setDisabled","style","buttonClass","name","ControlPanel","setDisabledForInc","setDisabledForReset","setDisabledForSet","incCounter","resetToZero","switchMode","ComponentBox","App","saveState","localStorage","setItem","JSON","stringify","restoreState","stateAsString","getItem","parse","setState","newNubmer","this","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6d9d3ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonClass\":\"Button_buttonClass__FNJ6m\"};","import React from 'react';\n\nclass ComponentInstaller extends React.Component {\n\n\n    render = () => {\n\n\n        return (\n            <div className=\"containerValue\">\n                <div>{this.props.nameInstaller}</div>\n                <input type=\"number\"\n                       value={this.props.value}\n                       onChange={this.props.onChangeFunc}\n                       className={this.props.classRed}/>\n            </div>\n        );\n    }\n}\n\nexport default ComponentInstaller;","import React from 'react';\nimport ComponentInstaller from \"./ComponentInstaller\";\n\nclass Display extends React.Component {\n    onChangeValueMax = (e) => {\n        let value = parseInt(e.currentTarget.value)\n        this.props.adjustValueMax(value)\n    }\n    onChangeValueMin = (e) => {\n        let value = parseInt(e.currentTarget.value)\n        this.props.adjustValueMin(value)\n    }\n\n    render = () => {\n        // let maxV = this.props.state.maxValue;\n        // let minV = this.props.state.minValue;\n        // let memo = this.props.state.memoryValue;\n\n        ///деструктуризация объекта\n        const {maxValue: maxV, minValue: minV, memoryValue: memo, settingMode} = this.props.state;\n\n        let classRedForDisplay = memo === maxV ? \"filter-red\" : \"\";\n        let classRedForMaxValue = (maxV <= minV || maxV < 0) ? \"input-red\" : \"\";\n        let classRedForMinValue = (maxV <= minV || minV < 0) ? \"input-red\" : \"\";\n        return (\n            <div className={`display`}>\n                {settingMode &&\n                <>\n                    <ComponentInstaller nameInstaller={\"max value:\"}\n                                        value={maxV}\n                                        onChangeFunc={this.onChangeValueMax}\n                                        classRed={classRedForMaxValue}/>\n                    <ComponentInstaller nameInstaller={\"start value:\"}\n                                        value={minV}\n                                        onChangeFunc={this.onChangeValueMin}\n                                        classRed={classRedForMinValue}/>\n                </>\n                }\n\n                {!settingMode && <span className={`numb ${classRedForDisplay}`}>{memo}</span>}\n            </div>\n        );\n    }\n}\n\nexport default Display;","import React from 'react';\nimport style from './Button.module.css'\n\nclass Button extends React.Component {\n\n    render = () => {\n        return (\n            <span>\n                <button\n                    onClick={this.props.onClickFunc}\n                    disabled={this.props.setDisabled}\n                    className={`${style.buttonClass}`}>\n                    {this.props.name}\n                </button>\n            </span>\n        );\n    }\n}\n\nexport default Button;","import React from 'react';\nimport Button from \"./Button\";\n\nclass ControlPanel extends React.Component {\n\n    render = () => {\n        ///деструктуризация объекта\n        const {maxValue: maxV, minValue: minV, memoryValue: memo, settingMode} = this.props.state;\n\n        let setDisabledForInc = (memo === maxV) ? true : false;\n        let setDisabledForReset = (minV === memo) ? true : false;\n        let setDisabledForSet = (maxV <= minV || maxV <= 0 || minV < 0) ? true : false;\n\n        return (\n            <div className=\"controlPanel\">\n\n                {!settingMode &&\n                <Button setDisabled={setDisabledForInc} name={'inc'} onClickFunc={this.props.incCounter}/>}\n                {!settingMode &&\n                <Button setDisabled={setDisabledForReset} name={'reset'} onClickFunc={this.props.resetToZero}/>}\n\n                <Button name={'set'} setDisabled={setDisabledForSet} onClickFunc={this.props.switchMode}/>\n            </div>\n        );\n    }\n}\n\nexport default ControlPanel;","import React from 'react';\nimport Display from \"./Display\";\nimport ControlPanel from \"./ControlPanel\";\n\nclass ComponentBox extends React.Component {\n\n    render = () => {\n\n        return (\n            <div className=\"box\">\n                <Display state={this.props.state}\n                         adjustValueMin={this.props.adjustValueMin}\n                         adjustValueMax={this.props.adjustValueMax}\n                />\n\n                <ControlPanel state={this.props.state} incCounter={this.props.incCounter}\n                              switchMode={this.props.switchMode}\n                              resetToZero={this.props.resetToZero}/>\n            </div>\n        );\n    }\n}\n\nexport default ComponentBox;","import React from 'react';\nimport './App.css';\nimport ComponentBox from \"./ComponentBox\";\n\nconst counter_state = \"counter_state\";\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    state = {\n        minValue: 0,\n        maxValue: 5,\n        memoryValue: 0,\n        settingMode: false\n    };\n    ///// метод, который будет брать текущий стейт и… сохранять его в localStorage\n    saveState = () => {\n        ////устанавливаем в localStorage под ключом counter_state  наш стейт переделанный в  джейсон строку JSON.stringify(this.state)\n\n        localStorage.setItem(counter_state, JSON.stringify(this.state));\n    }\n\n    restoreState = () => {\n\n        //// считываем сохраненную ранее строку из localStorage\n        let stateAsString = localStorage.getItem(counter_state)\n        ////если таковая есть, то превращаем строку в объект и призваиваем стейту знаение из стораджа.\n        if (stateAsString) {\n            let state = JSON.parse(stateAsString);\n            this.setState(state)\n        }\n    }\n\n    resetToZero = () => {\n        this.setState({memoryValue: this.state.minValue})\n    }\n\n    incCounter = () => {\n        let newNubmer = parseInt(this.state.memoryValue) + 1;\n        if (newNubmer <= this.state.maxValue) {\n            this.setState({memoryValue: newNubmer})\n        }\n    }\n\n    switchMode = () => {\n        debugger\n        switch (this.state.settingMode) {\n            case true:\n                this.setState({memoryValue: this.state.minValue, settingMode: false}, this.saveState)\n                break;\n            case false:\n                this.setState({settingMode: true})\n                break;\n        }\n    }\n\n    adjustValueMax = (value) => {\n        this.setState({maxValue: value}, this.saveState)\n    }\n    adjustValueMin = (value) => {\n        this.setState({minValue: value}, this.saveState)\n    }\n\n    render = () => {\n        return (\n            <div className=\"container\">\n                <ComponentBox state={this.state}\n                              incCounter={this.incCounter}\n                              resetToZero={this.resetToZero}\n                              switchMode={this.switchMode}\n                              adjustValueMin={this.adjustValueMin}\n                              adjustValueMax={this.adjustValueMax}/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}